# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  SugarLambda

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Environment variables
Parameters:
  SugarUsername:
    Type: String
    Default: ''
    Description: Sugar Username for Authentication with Lambda
  SugarPassword:
    Type: String
    Default: ''
    Description: Sugar Password for Authentication with Lambda
  SugarUrl:
    Type: String
    Default: ''
    Description: URL of your Sugar Instance
  AwsConnectInstance:
    Type: String
    Default: ''
    Description: AWS Connect instance name
  ContactFlowId:
    Type: String
    Description: The contact flow id that the customer will interact with while chatting
    AllowedPattern: '\w{8}-\w{4}-\w{4}-\w{4}-\w{12}'
  InstanceId:
    Type: String
    Description: The instance id of the Amazon Connect instance that the customer will interact with while chatting
    AllowedPattern: '\w{8}-\w{4}-\w{4}-\w{4}-\w{12}'

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: create-case.js
  CreateCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-case.createCaseHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          sugarUsername: !Ref SugarUsername
          sugarPass: !Ref SugarPassword
          sugarUrl: !Ref SugarUrl
      Description: A Lambda function that creates a case.
      Policies:
        # Give Lambda basic execution Permission to write CloudWatch logs
        - AWSLambdaBasicExecutionRole

  # This is a Lambda function config associated with the source code: add-note-to-case.js
  AddNoteToCaseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/add-note-to-case.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Environment:
        Variables:
          sugarUsername: !Ref SugarUsername
          sugarPass: !Ref SugarPassword
          sugarUrl: !Ref SugarUrl
      Description: A Lambda function that adds a note to a case.
      Policies:
        # Give Lambda basic execution Permission to write CloudWatch logs
        - AWSLambdaBasicExecutionRole

  # This is a Lambda function config for source code: case-status.js
  CaseStatusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: AWS Lambda Function to get case status by case number
      Handler: 'src/handlers/case-status.handler'
      Runtime: 'nodejs12.x'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          sugarUsername: !Ref SugarUsername
          sugarPass: !Ref SugarPassword
          sugarUrl: !Ref SugarUrl
      Policies:
        # Give Lambda basic execution Permission to createCase
        - AWSLambdaBasicExecutionRole

  SaveCallTranscriptFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: AWS Lambda Function to save call transcripts based on S3 Trigger
      Handler: 'src/handlers/save-transcript.handler'
      Runtime: 'nodejs12.x'
      MemorySize: 128
      Role: !GetAtt s3CloudwatchLambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          sugarUsername: !Ref SugarUsername
          sugarPass: !Ref SugarPassword
          sugarUrl: !Ref SugarUrl

  CallRecordingFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: AWS Lambda Function to perform actions on the call recording
      Handler: 'src/handlers/call-recording.handler'
      Runtime: 'nodejs12.x'
      MemorySize: 128
      Role: !GetAtt s3CloudwatchLambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          sugarUsername: !Ref SugarUsername
          sugarPass: !Ref SugarPassword
          sugarUrl: !Ref SugarUrl
          awsConnectInstance: !Ref AwsConnectInstance

  # Function to start connect Chat from API call
  StartChatFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: AWS Lambda Function to start chat from incoming API call
      Handler: 'src/handlers/start-chat.handler'
      Runtime: 'nodejs12.x'
      MemorySize: 128
      Role: !GetAtt StartChatLambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          instanceId: !Ref InstanceId
          contactFlowId: !Ref ContactFlowId
      Events:
        GetRoot:
          Type: Api
          Properties:
            RestApiId: !Ref StartChatApiGateway
            Path: /
            Method: post

  # Role to combine S3, CloudWatch, and Basic Lambda permissions for saving
  s3CloudwatchLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"

  # Role to give StartChat lambda access to the client amazon connect instance
  StartChatLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: start-chat-contact-execution-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "connect:StartChatContact"
                Resource:
                  - !Sub "arn:${AWS::Partition}:connect:${AWS::Region}:${AWS::AccountId}:instance/${InstanceId}"
                  - !Sub "arn:${AWS::Partition}:connect:${AWS::Region}:${AWS::AccountId}:instance/${InstanceId}/*"

  StartChatApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
